================================================================================
=
= file:     history.txt
=
= project:  sicherDigger
= author:   damicha of defect, 2011
=
= description:
=  The development history of the project sicherDigger
=
================================================================================


next:
- file templates
- add level handling: SDig_LevelEngine()
  - init level
  - run level
  - exit level
  - set game info (point, lives, level results)


  0.1pre - text output
========================

* == TODOs ==

* improve main page for doxygen documentation

* SDig_PhysicsEngine.h, SDig_PhysicsEngine.cpp: game physic engine
  - add physics engine for obj types, empty, sand, wall, diamond

* == history ==

* common:
 - github is used to store the sources

* doxygen
  - a main page was added

**** FIXME: update engine functions !!

* SDig_GameEngine:
  - creates TextEngine and TimeEngine
  - controls data and engines

* SDig_LevelEngine:
  - creates TextEngine and PhysicsEngine
  - creates object field (game data)
  - controls data and engines

* SDig_TextEngine.h: text output/input engine
  - ncurses is used
  - basic drawing of the object field
  - maps data object type to an specified character

* SDig_TimeEngine.h/.cpp: waits for a configurable trigger event
  - uses the system functions gettimeofday() and usleep()

* SDig_PhysicsEngine.h/.cpp: game physic engine
  - simple stone movement (it's falling down) was added
  - player physics to move to the left, right, up and down
  - exit

* SDig_BaseDOT.h, BaseDOT.cpp
  - The DOTPlayer class has its own states (ALIVE, EXITING, EXITED)
  - The base data object type class BaseDOT for derived data object
    types (stone, wall, sand, ...)
  - function to create a object of a derived BaseDOT class as a function
    of the required object type.

* SDig_DOTs.h
  - The data object type classes DOTWall, DOTSand, DOTEmpty, DOTStone, DOTExit and
    DOTPlayer derived from class BaseDOT were implemented.

* SDig_DataObject.h
  - The data object class contains the type of the object and some members that
    store internal states.

* objField.h, objField.cpp:
  - creates and initializes an object field from a configuration array

* objFieldEntry.h, objFieldEntry.cpp:
  - ...

* config.h: field configuration class
  - a simple char array is used to set the default values of an objField

* configData.h: field configurations

