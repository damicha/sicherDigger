===============================================================================
=
= project:  sicherDigger
= author:   damicha of defect, 2011
=
= file:
=  history.txt
=
= description:
=  The development history of the project sicherDigger
=
===============================================================================


next:
 - move player object data
 - player object -> improve player object class
 - templates


  0.1pre - text output
================

* baseDataObjectType.h, baseDataObjectType.cpp
  - The base data object type class baseDataObjectType for derived data object
    types (stone, wall, sand, ...)
  - function to create a object of a derived baseDataObjectType class as a function
    of the required object type.

* dataObjectTypes.h
  - The data object type classes dotWall, dotSand, dotStone and dotEmpty derived
    from class baseDataObjectType.

* dataObject.h, dataObject.cpp
  - data object class that contains the type of the object and some members that
    defines the state of class' instance.

* objField.h, objField.cpp:
  - creates and initializes an object field from a configuration array

* objFieldEntry.h, objFieldEntry.cpp:
  - ...

* textEngine.h: text ouput engine
  - basic drawing of the object field
  - maps data object type to an specified character

* timeEngine.h: wait for configurable trigger events
  - uses the system functions gettimeofday() and usleep()

* config.h: field configuration class
  - a simple char array is used to set the default values of an objField

* configData.h: field configurations

* physicsEngine.h, physicsEngine.cpp: game physic engine
  - simple stone movement (it's falling down) was added

* == TODOs ==

* physicsEngine.h, physicsEngine.cpp: game physic engine
  - add physics engine for obj types, empty, sand, wall, diamond

* control engine
  - capture user inputs

* common:
 - use github to store the sources
